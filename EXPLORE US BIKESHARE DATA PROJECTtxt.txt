import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month and day to analyze.
    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
   
    print('Hello! Let\'s explore some US bikeshare data!')
    
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    
    city = input('would you like to see data for chicago,new york city or washington?').lower()
    while city not in ['chicago','new york city','washington']:
        print("invalid input!")
        city = input('would you like to see data for chicago,new york city or washington?').lower()

    # TO DO: get user input for month (all, january, february, ... , june)
    
    month = input('Which month-all,January,February,March,April,May, or June?').title()
    while month not in ['All','January','February','March','April','May','June']:
        print("invalid input!")
        month = input('Which month-all,January,February,March,April,May, or June?').title()

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    
    day = input('Which day-all,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday or Sunday?').title()
    while day not in ['All','Sunday','Monday','Tuesday','Wednesday','Thursday','Friday']:
        print("invalid input!")
        day = input('Which day-all,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday or Sunday?').title()             
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['hour'] = df['Start Time'].dt.hour
    df['Trip'] = df['Start Station'] + ' to ' + df['End Station']
    if  month != 'All':
        months = ['January','February','March','April','May','June']
        month = months.index(month)+1
        df = df[df['month'] == month]
    if  day != 'All':
        days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
        df = df[df['day_of_week'] == day.title()]   
    return df

def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    most_common_month = df['month'].mode()[0]
    print('Most Common Month',most_common_month)

    # TO DO: display the most common day of week
    most_common_day = df ['day_of_week'].mode()[0]
    print('Most Common Day', most_common_day)

    # TO DO: display the most common start hour
    most_common_start_hour = df['hour'].mode()[0]
    print('Most Common Hour',most_common_start_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    most_common_start_station = df['Start Station'].mode()[0]
    print('Most Common Start Station', most_common_start_station)

    # TO DO: display most commonly used end station
    most_common_end_station = df['End Station'].mode()[0]
    print('Most Common End Station', most_common_end_station)

    # TO DO: display most frequent combination of start station and end station trip
    most_common_trip = df['Trip'].mode()[0]
    print('Most Common Trip', most_common_trip)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('Total Travel Time:', total_travel_time)
    # TO DO: display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('Mean Travel Time:', mean_travel_time)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df,city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('counts of users types')
    print(df['User Type'].value_counts())
    
    

    # TO DO: Display counts of gender
    if city != 'washington':
        print('counts of gender')
        print(df['Gender'].value_counts())
        
    # TO DO: Display earliest, most recent, and most common year of birth
        earliest_year = df['Birth Year'].min()
        print('Earliest Year is ',earliest_year)
        most_recent_year = df['Birth Year'].max()
        print('Most Recent Year is',most_recent_year)
        most_common_year = df['Birth Year'].mode()[0]
        print('Most Common Year is',most_common_year)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def display_raw_data(city):
    """The fuction takes the name of the city produced by the get_filters fuction as input and returns the raw data of that city as chunks of 5 rows based upon user input.
    """
    df = pd.read_csv(CITY_DATA[city])
    print('\nRaw data is available to check... \n')
    start_loc = 0
    while True:
        display_opt = input('To View the availbale raw data in chuncks of 5 rows type: Yes      \n').lower()
        if display_opt not in ['yes', 'no']:
            print('That\'s invalid choice, pleas type yes or no')
        elif display_opt == 'yes':
                print(df.iloc[start_loc:start_loc+5])
                start_loc+=5
        elif display_opt == 'no':
                print('\nExiting...')
                break


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df,city)
        display_raw_data(city)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()

